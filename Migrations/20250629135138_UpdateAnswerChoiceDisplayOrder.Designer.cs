// <auto-generated />
using System;
using BE_Phygens.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BE_Phygens.Migrations
{
    [DbContext(typeof(PhygensContext))]
    [Migration("20250629135138_UpdateAnswerChoiceDisplayOrder")]
    partial class UpdateAnswerChoiceDisplayOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BE_Phygens.Models.AdaptiveLearningData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("chapterid");

                    b.Property<string>("DifficultyPreference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difficultypreference");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<string>("PerformanceTrend")
                        .HasColumnType("text")
                        .HasColumnName("performancetrend");

                    b.Property<string>("RecommendedDifficulty")
                        .HasColumnType("text")
                        .HasColumnName("recommendeddifficulty");

                    b.Property<string[]>("StrongTopics")
                        .HasColumnType("text[]")
                        .HasColumnName("strongtopics");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string[]>("WeakTopics")
                        .HasColumnType("text[]")
                        .HasColumnName("weaktopics");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserId", "ChapterId")
                        .IsUnique();

                    b.ToTable("adaptivelearningdata");
                });

            modelBuilder.Entity("BE_Phygens.Models.AiGenerationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("errormessage");

                    b.Property<int?>("GenerationTimeMs")
                        .HasColumnType("integer")
                        .HasColumnName("generationtimems");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modelname");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sessionid");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<int?>("TokensUsed")
                        .HasColumnType("integer")
                        .HasColumnName("tokensused");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("aigenerationhistory");
                });

            modelBuilder.Entity("BE_Phygens.Models.AiModelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CostPer1kTokens")
                        .HasColumnType("numeric")
                        .HasColumnName("costper1ktokens");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("integer")
                        .HasColumnName("maxtokens");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modelname");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<decimal?>("QualityRating")
                        .HasColumnType("numeric")
                        .HasColumnName("qualityrating");

                    b.Property<int>("RateLimitPerMinute")
                        .HasColumnType("integer")
                        .HasColumnName("ratelimitperminute");

                    b.Property<string[]>("Specialties")
                        .HasColumnType("text[]")
                        .HasColumnName("specialties");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("numeric")
                        .HasColumnName("temperature");

                    b.HasKey("Id");

                    b.HasIndex("Provider", "ModelName")
                        .IsUnique();

                    b.ToTable("aimodelconfigs");
                });

            modelBuilder.Entity("BE_Phygens.Models.AiUsageStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("FailedRequests")
                        .HasColumnType("integer")
                        .HasColumnName("failedrequests");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<int>("SuccessfulRequests")
                        .HasColumnType("integer")
                        .HasColumnName("successfulrequests");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("totalcost");

                    b.Property<int>("TotalRequests")
                        .HasColumnType("integer")
                        .HasColumnName("totalrequests");

                    b.Property<int>("TotalTokens")
                        .HasColumnType("integer")
                        .HasColumnName("totaltokens");

                    b.HasKey("Id");

                    b.HasIndex("Date", "Provider")
                        .IsUnique();

                    b.ToTable("aiusagestats");
                });

            modelBuilder.Entity("BE_Phygens.Models.AnswerChoice", b =>
                {
                    b.Property<string>("ChoiceId")
                        .HasColumnType("text")
                        .HasColumnName("choiceid");

                    b.Property<string>("ChoiceLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("choicelabel");

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("choicetext");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayorder");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("iscorrect");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.HasKey("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("answerchoice", t =>
                        {
                            t.HasCheckConstraint("CK_AnswerChoice_DisplayOrder", "displayorder > 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chapterid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChapterId"));

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("chaptername");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayorder");

                    b.Property<int>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.HasKey("ChapterId");

                    b.ToTable("chapter", t =>
                        {
                            t.HasCheckConstraint("CK_Chapter_DisplayOrder", "displayorder > 0");

                            t.HasCheckConstraint("CK_Chapter_Grade", "grade IN (10, 11, 12)");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.Exam", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("text")
                        .HasColumnName("examid");

                    b.Property<bool>("AdaptiveDifficulty")
                        .HasColumnType("boolean")
                        .HasColumnName("adaptivedifficulty");

                    b.Property<string>("AiGenerationConfig")
                        .HasColumnType("jsonb")
                        .HasColumnName("aigenerationconfig");

                    b.Property<bool>("AutoGradingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("autogradingenabled");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("durationminutes");

                    b.Property<string>("ExamMatrixMatrixId")
                        .HasColumnType("text")
                        .HasColumnName("ExamMatrixMatrixId");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examname");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examtype");

                    b.Property<bool>("IsAiGenerated")
                        .HasColumnType("boolean")
                        .HasColumnName("isaigenerated");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("ispublished");

                    b.HasKey("ExamId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExamMatrixMatrixId");

                    b.ToTable("exam", t =>
                        {
                            t.HasCheckConstraint("CK_Exam_DurationMinutes", "durationminutes > 0");

                            t.HasCheckConstraint("CK_Exam_ExamType", "examtype IN ('15p', '1tiet', 'cuoiky', 'ai_generated', 'smart_exam', 'adaptive')");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamMatrix", b =>
                {
                    b.Property<string>("MatrixId")
                        .HasColumnType("text")
                        .HasColumnName("matrixid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("ExamName")
                        .HasColumnType("text")
                        .HasColumnName("examname");

                    b.Property<int>("NumEasy")
                        .HasColumnType("integer")
                        .HasColumnName("numeasy");

                    b.Property<int>("NumHard")
                        .HasColumnType("integer")
                        .HasColumnName("numhard");

                    b.Property<int>("NumMedium")
                        .HasColumnType("integer")
                        .HasColumnName("nummedium");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<int>("TotalQuestions")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasColumnName("totalquestions");

                    b.HasKey("MatrixId");

                    b.ToTable("exammatrix", t =>
                        {
                            t.HasCheckConstraint("CK_ExamMatrix_NumEasy", "numeasy >= 0");

                            t.HasCheckConstraint("CK_ExamMatrix_NumHard", "numhard >= 0");

                            t.HasCheckConstraint("CK_ExamMatrix_NumMedium", "nummedium >= 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamMatrixDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("chapterid");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("difficultylevel");

                    b.Property<string>("ExamMatrixId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exammatrixid");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer")
                        .HasColumnName("questioncount");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ExamMatrixId");

                    b.ToTable("exammatrixdetail", t =>
                        {
                            t.HasCheckConstraint("CK_ExamMatrixDetail_DifficultyLevel", "difficultylevel IN ('easy', 'medium', 'hard')");

                            t.HasCheckConstraint("CK_ExamMatrixDetail_QuestionCount", "questioncount >= 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamQuestion", b =>
                {
                    b.Property<string>("ExamQuestionId")
                        .HasColumnType("text")
                        .HasColumnName("examquestionid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("addedat");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examid");

                    b.Property<decimal>("PointsWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("pointsweight");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.Property<int?>("QuestionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("questionorder");

                    b.HasKey("ExamQuestionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("examquestion", t =>
                        {
                            t.HasCheckConstraint("CK_ExamQuestion_PointsWeight", "pointsweight >= 0");

                            t.HasCheckConstraint("CK_ExamQuestion_QuestionOrder", "questionorder > 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.Explanation", b =>
                {
                    b.Property<string>("ExplanationId")
                        .HasColumnType("text")
                        .HasColumnName("explanationid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<string>("ExplanationText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("explanationtext");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.HasKey("ExplanationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionId");

                    b.ToTable("explanations");
                });

            modelBuilder.Entity("BE_Phygens.Models.LearningProgress", b =>
                {
                    b.Property<string>("ProgressId")
                        .HasColumnType("text")
                        .HasColumnName("progressid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<decimal>("AvgScore")
                        .HasColumnType("numeric")
                        .HasColumnName("avgscore");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdated");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topicid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("ProgressId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("learningprogress", t =>
                        {
                            t.HasCheckConstraint("CK_LearningProgress_Attempts", "attempts >= 0");

                            t.HasCheckConstraint("CK_LearningProgress_AvgScore", "avgscore >= 0 AND avgscore <= 10");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.PhysicsTopic", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("text")
                        .HasColumnName("topicid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("displayorder");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gradelevel");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topicname");

                    b.HasKey("TopicId");

                    b.HasIndex("TopicName")
                        .IsUnique();

                    b.ToTable("physicstopic", t =>
                        {
                            t.HasCheckConstraint("CK_PhysicsTopic_DisplayOrder", "displayorder > 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.Property<bool>("AiGenerated")
                        .HasColumnType("boolean")
                        .HasColumnName("aigenerated");

                    b.Property<string>("AiGenerationMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("aigenerationmetadata");

                    b.Property<string>("AiModel")
                        .HasColumnType("text")
                        .HasColumnName("aimodel");

                    b.Property<string>("AiPromptUsed")
                        .HasColumnType("text")
                        .HasColumnName("aipromptused");

                    b.Property<string>("AiProvider")
                        .HasColumnType("text")
                        .HasColumnName("aiprovider");

                    b.Property<string>("AiValidationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aivalidationstatus");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("chapterid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difficultylevel");

                    b.Property<string>("Explanation")
                        .HasColumnType("text")
                        .HasColumnName("explanation");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<decimal?>("QualityScore")
                        .HasColumnType("numeric")
                        .HasColumnName("qualityscore");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questiontext");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questiontype");

                    b.Property<string>("SpecificTopic")
                        .HasColumnType("text")
                        .HasColumnName("specifictopic");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("topicid");

                    b.HasKey("QuestionId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TopicId");

                    b.ToTable("question", t =>
                        {
                            t.HasCheckConstraint("CK_Question_AiValidationStatus", "aivalidationstatus IN ('pending', 'validated', 'needsReview', 'rejected')");

                            t.HasCheckConstraint("CK_Question_DifficultyLevel", "difficultylevel IN ('easy', 'medium', 'hard')");

                            t.HasCheckConstraint("CK_Question_QualityScore", "qualityscore >= 0 AND qualityscore <= 10");

                            t.HasCheckConstraint("CK_Question_QuestionType", "questiontype IN ('multiple_choice', 'true_false', 'essay')");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.QuestionQualityFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("text")
                        .HasColumnName("feedbacktext");

                    b.Property<string>("FeedbackType")
                        .HasColumnType("text")
                        .HasColumnName("feedbacktype");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("questionqualityfeedback", t =>
                        {
                            t.HasCheckConstraint("CK_QuestionQualityFeedback_FeedbackType", "feedbacktype IN ('quality', 'difficulty', 'clarity', 'accuracy')");

                            t.HasCheckConstraint("CK_QuestionQualityFeedback_Rating", "rating >= 1 AND rating <= 5");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.SmartExamTemplate", b =>
                {
                    b.Property<string>("TemplateId")
                        .HasColumnType("text")
                        .HasColumnName("templateid");

                    b.Property<string>("ChapterWeights")
                        .HasColumnType("text")
                        .HasColumnName("chapterweights");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DifficultyDistribution")
                        .HasColumnType("text")
                        .HasColumnName("difficultydistribution");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("durationminutes");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examtype");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("TargetGrade")
                        .HasColumnType("integer")
                        .HasColumnName("targetgrade");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("templatename");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("totalquestions");

                    b.HasKey("TemplateId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("smartexamtemplates");
                });

            modelBuilder.Entity("BE_Phygens.Models.StudentAnswer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("text")
                        .HasColumnName("answerid");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answeredat");

                    b.Property<string>("AttemptId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attemptid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("iscorrect");

                    b.Property<decimal>("PointsEarned")
                        .HasColumnType("numeric")
                        .HasColumnName("pointsearned");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionid");

                    b.Property<string>("SelectedChoiceId")
                        .HasColumnType("text")
                        .HasColumnName("selectedchoiceid");

                    b.Property<string>("StudentTextAnswer")
                        .HasColumnType("text")
                        .HasColumnName("studenttextanswer");

                    b.HasKey("AnswerId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedChoiceId");

                    b.ToTable("studentanswer", t =>
                        {
                            t.HasCheckConstraint("CK_StudentAnswer_PointsEarned", "pointsearned >= 0");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.StudentAttempt", b =>
                {
                    b.Property<string>("AttemptId")
                        .HasColumnType("text")
                        .HasColumnName("attemptid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("examid");

                    b.Property<decimal?>("MaxScore")
                        .HasColumnType("numeric")
                        .HasColumnName("maxscore");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("numeric")
                        .HasColumnName("totalscore");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("AttemptId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("studentattempt", t =>
                        {
                            t.HasCheckConstraint("CK_StudentAttempt_MaxScore", "maxscore > 0 AND maxscore <= 10");

                            t.HasCheckConstraint("CK_StudentAttempt_Status", "status IN ('in_progress', 'completed', 'abandoned')");

                            t.HasCheckConstraint("CK_StudentAttempt_TotalScore", "totalscore >= 0 AND totalscore <= 10");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_Role", "role IN ('student', 'admin')");
                        });
                });

            modelBuilder.Entity("BE_Phygens.Models.AdaptiveLearningData", b =>
                {
                    b.HasOne("BE_Phygens.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Phygens.Models.AiGenerationHistory", b =>
                {
                    b.HasOne("BE_Phygens.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Phygens.Models.AnswerChoice", b =>
                {
                    b.HasOne("BE_Phygens.Models.Question", "Question")
                        .WithMany("AnswerChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BE_Phygens.Models.Exam", b =>
                {
                    b.HasOne("BE_Phygens.Models.User", "Creator")
                        .WithMany("CreatedExams")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.ExamMatrix", null)
                        .WithMany("Exams")
                        .HasForeignKey("ExamMatrixMatrixId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamMatrixDetail", b =>
                {
                    b.HasOne("BE_Phygens.Models.Chapter", "Chapter")
                        .WithMany("ExamMatrixDetails")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.ExamMatrix", "ExamMatrix")
                        .WithMany("ExamMatrixDetails")
                        .HasForeignKey("ExamMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("ExamMatrix");
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamQuestion", b =>
                {
                    b.HasOne("BE_Phygens.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BE_Phygens.Models.Explanation", b =>
                {
                    b.HasOne("BE_Phygens.Models.User", "Creator")
                        .WithMany("CreatedExplanations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.Question", "Question")
                        .WithMany("Explanations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BE_Phygens.Models.LearningProgress", b =>
                {
                    b.HasOne("BE_Phygens.Models.PhysicsTopic", "Topic")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.User", "User")
                        .WithMany("LearningProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Phygens.Models.Question", b =>
                {
                    b.HasOne("BE_Phygens.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("BE_Phygens.Models.User", "Creator")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.PhysicsTopic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Creator");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BE_Phygens.Models.QuestionQualityFeedback", b =>
                {
                    b.HasOne("BE_Phygens.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Phygens.Models.SmartExamTemplate", b =>
                {
                    b.HasOne("BE_Phygens.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BE_Phygens.Models.StudentAnswer", b =>
                {
                    b.HasOne("BE_Phygens.Models.StudentAttempt", "Attempt")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.AnswerChoice", "SelectedChoice")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("SelectedChoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedChoice");
                });

            modelBuilder.Entity("BE_Phygens.Models.StudentAttempt", b =>
                {
                    b.HasOne("BE_Phygens.Models.Exam", "Exam")
                        .WithMany("StudentAttempts")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Phygens.Models.User", "User")
                        .WithMany("StudentAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Phygens.Models.AnswerChoice", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("BE_Phygens.Models.Chapter", b =>
                {
                    b.Navigation("ExamMatrixDetails");
                });

            modelBuilder.Entity("BE_Phygens.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentAttempts");
                });

            modelBuilder.Entity("BE_Phygens.Models.ExamMatrix", b =>
                {
                    b.Navigation("ExamMatrixDetails");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("BE_Phygens.Models.PhysicsTopic", b =>
                {
                    b.Navigation("LearningProgresses");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BE_Phygens.Models.Question", b =>
                {
                    b.Navigation("AnswerChoices");

                    b.Navigation("ExamQuestions");

                    b.Navigation("Explanations");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("BE_Phygens.Models.StudentAttempt", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("BE_Phygens.Models.User", b =>
                {
                    b.Navigation("CreatedExams");

                    b.Navigation("CreatedExplanations");

                    b.Navigation("CreatedQuestions");

                    b.Navigation("LearningProgresses");

                    b.Navigation("StudentAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
